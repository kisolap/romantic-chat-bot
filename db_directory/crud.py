import logging
import os

from db_directory.models import User, Like, ViewedPartner, Photo
from db_directory.database import get_db
from sqlalchemy.future import select
from sqlalchemy import delete
from sqlalchemy.orm import joinedload
from aiogram import Bot

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def broadcast_message(bot: Bot, text: str):
    async for session in get_db():
        query = select(User.telegram_id)
        result = await session.execute(query)
        chat_ids = [row[0] for row in result.fetchall()]

        for chat_id in chat_ids:
            try:
                await bot.send_message(chat_id=chat_id, text=text)
            except Exception as e:
                # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
                logging.error(f"Failed to send message to chat_id {chat_id}: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def user_exists(telegram_id: int) -> bool:
    async for session in get_db():
        result = await session.execute(select(User).filter(User.telegram_id == telegram_id))
        return result.scalar_one_or_none() is not None

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID (—Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ç–æ)
async def get_user(telegram_id: int) -> User:
    async for session in get_db():
        result = await session.execute(
            select(User)
            .options(joinedload(User.photos))
            .filter(User.telegram_id == telegram_id)
        )
        return result.unique().scalar_one_or_none()

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —Ñ–æ—Ç–æ)
async def create_user(
    telegram_id: int, telegram_username: str, name: str, age: int, sex: str, preference: str, bio: str, faculty: str
) -> User:
    async for session in get_db():
        new_user = User(
            telegram_id=telegram_id,
            telegram_username=telegram_username,
            name=name,
            age=age,
            sex=sex,
            preference=preference,
            bio=bio,
            faculty=faculty,
            is_active=True
        )
        session.add(new_user)
        await session.commit()
        await session.refresh(new_user)
        return new_user


# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def add_photo(user_id: int, photo_path: str) -> Photo:
    async for session in get_db():
        new_photo = Photo(user_id=user_id, path=photo_path)
        session.add(new_photo)
        await session.commit()
        await session.refresh(new_photo)
        return new_photo

# üîπ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def delete_photo(photo_id: int) -> bool:
    async for session in get_db():
        result = await session.execute(select(Photo).filter(Photo.id == photo_id))
        photo = result.scalar_one_or_none()
        if photo:
            if os.path.exists(photo.path):
                os.remove(photo.path)
            await session.delete(photo)
            await session.commit()
            return True
        return False

async def get_user_photos(user_id: int) -> list[Photo]:
    async for session in get_db():
        result = await session.execute(select(Photo).filter(Photo.user_id == user_id))
        return result.scalars().all()

async def update_user_info(telegram_id: int, name: str = None, bio: str = None, sex: str = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalars().first()

        if user:
            if name:
                user.name = name
            if bio:
                user.bio = bio
            if sex:
                user.sex = sex

            await session.commit()
            return user
        return None

async def update_user_photos(telegram_id: int, photo_paths: list[str]):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ)."""
    async for session in get_db():
        result = await session.execute(
            select(User).options(joinedload(User.photos)).where(User.telegram_id == telegram_id))
        user = result.scalars().first()

        if user:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ
            await session.execute(delete(Photo).where(Photo.user_id == telegram_id))

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            new_photos = [Photo(user_id=telegram_id, path=path) for path in photo_paths]
            session.add_all(new_photos)

            await session.commit()
            return user
        return None


# üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏ –µ–≥–æ —Ñ–æ—Ç–æ)
async def delete_user(telegram_id: int) -> bool:
    async for session in get_db():
        result = await session.execute(select(User).filter(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if user:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            photos = await session.execute(select(Photo).filter(Photo.user_id == user.id))
            for photo in photos.scalars().all():
                if os.path.exists(photo.path):
                    os.remove(photo.path)
                await session.delete(photo)
            await session.delete(user)
            await session.commit()
            return True
        return False

async def deactivate_user(user_id: int):
    async for session in get_db():
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç User

        if user:
            user.is_active = False
            await session.commit()

async def activate_user(user_id: int):
    async for session in get_db():
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç User

        if user:
            user.is_active = True
            await session.commit()
            await session.refresh(user)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–µ—Å—Å–∏–∏
            return user
        return None

# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞
async def add_like(user_id: int, liked_user_id: int) -> Like:
    async for session in get_db():
        new_like = Like(user_id=user_id, liked_user_id=liked_user_id)
        session.add(new_like)
        await session.commit()
        await session.refresh(new_like)
        return new_like

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –ª–∞–π–∫–Ω—É–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_likers(user_id: int) -> list[Like] | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Like, –≥–¥–µ user_id —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –ª–∞–π–∫–∞.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ –ª–∞–π–∫–µ—Ä—ã –Ω—É–∂–Ω—ã
    :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î
    :return: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Like (—Ç–µ, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª–∏ user_id)
    """
    async for session in get_db():
        stmt = select(Like).where(Like.liked_user_id == user_id)
        result = await session.execute(stmt)
        likers = result.scalars().all()
        if likers:
            return likers
        if not likers:
            return None

async def delete_like(user_id: int, liked_user_id: int) -> Like:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ª–∞–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ user_id –ø–æ—Å—Ç–∞–≤–∏–ª liked_user_id.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫
    :param liked_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫
    :return: True, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ª–∞–π–∫ –±—ã–ª —É–¥–∞–ª—ë–Ω, False, –µ—Å–ª–∏ –ª–∞–π–∫–æ–≤ –Ω–µ –±—ã–ª–æ
    """
    async for session in get_db():
        stmt = select(Like).where(Like.user_id == user_id, Like.liked_user_id == liked_user_id)
        result = await session.execute(stmt)
        likes = result.scalars().all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏

        if likes:
            for like in likes:
                await session.delete(like)  # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ª–∞–π–∫
            await session.commit()
            return likes[0]


# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞, –ª–∞–π–∫–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—Ä—É–≥–æ–≥–æ
async def is_user_liked(user_id: int, liked_user_id: int) -> bool:
    async for session in get_db():
        result = await session.execute(
            select(Like).filter(Like.user_id == user_id, Like.liked_user_id == liked_user_id)
        )
        return result.scalar_one_or_none() is not None

# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
async def add_viewed_partner(user_id: int, partner_id: int) -> ViewedPartner:
    async for session in get_db():
        new_viewed = ViewedPartner(user_id=user_id, partner_id=partner_id)
        session.add(new_viewed)
        await session.commit()
        await session.refresh(new_viewed)
        return new_viewed

# üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
async def remove_viewed_partner(user_id: int, partner_id: int) -> ViewedPartner | None:
    async for session in get_db():
        stmt = (select(ViewedPartner)
        .where(ViewedPartner.user_id == user_id, ViewedPartner.partner_id == partner_id))
        result = await session.execute(stmt)

        viewed = result.scalars().first()
        # viewed = result.scalar_one_or_none()

        if viewed:
            await session.delete(viewed)
            await session.commit()
            return viewed

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—Ä—É–≥–æ–≥–æ
async def is_partner_viewed(user_id: int, partner_id: int) -> bool:
    async for session in get_db():
        result = await session.execute(
            select(ViewedPartner).filter(ViewedPartner.user_id == user_id, ViewedPartner.partner_id == partner_id)
        )
        return result.scalar_one_or_none() is not None

# üîπ –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
async def find_unviewed_partner(user_id: int, preference: str) -> User:
    async for session in get_db():
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        user = await session.get(User, user_id)

        if user.preference == "both":
            result = await session.execute(
                select(User)
                .filter(
                    User.is_active == True,
                    User.telegram_id != user_id,
                    User.telegram_id.notin_(
                        select(ViewedPartner.partner_id).filter(ViewedPartner.user_id == user_id)
                    ),
                )
                .limit(1)
            )
        else:
            result = await session.execute(
                select(User)
                .filter(
                    User.is_active == True,
                    User.sex == user.preference,
                    User.telegram_id != user_id,
                    User.telegram_id.notin_(
                        select(ViewedPartner.partner_id).filter(ViewedPartner.user_id == user_id)
                    ),
                )
                .limit(1)
            )


        return result.unique().scalar_one_or_none()  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã


# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—Ç–∞–≤–∏–ª –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def has_partner_liked_back(user_id: int, partner_id: int) -> bool:
    async for session in get_db():
        result = await session.execute(
            select(Like).filter(Like.user_id == partner_id, Like.liked_user_id == user_id)
        )
        return result.scalar_one_or_none() is not None
