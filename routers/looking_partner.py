from aiogram import Router, F, Bot

from aiogram.fsm.context import FSMContext
from aiogram.filters import Filter
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import ReplyKeyboardRemove, Message

from answer_functions.create_keyboard import create_row_kb, create_menu_keyboard
from answer_functions.show_profile import show_profile, show_partner_profile
from db_directory.crud import find_unviewed_partner, add_viewed_partner, add_like, has_partner_liked_back, get_likers, \
    get_user, delete_like, deactivate_user, activate_user, remove_viewed_partner

from main import my_bot
from redis_storage import storage

from states import LookingPartner, ChangeProfile

router = Router()

class CorrectEmoji(Filter):
    async def __call__(self, message: Message) -> bool:
        return message.text in {"‚ù§Ô∏è", "üëé"}

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
async def notify_partner_about_match(partner_id: int, user_name: str, bot: Bot):
    if user_name is None:
        await bot.send_message(
            chat_id=partner_id,
            text=f"üíò –£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –í–∞—à –º—ç—Ç—á –∑–∞—Ö–æ—Ç–µ–ª –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º, –æ–Ω —Å–∞–º –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç ;)"
        )
    else:
        await bot.send_message(
            chat_id=partner_id,
            text=f"üíò –£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ c @{user_name}"
        )

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ –ª–∞–π–∫–µ
async def notify_partner_about_like(partner_id: int, bot: Bot, message: Message):
    liked_user_state = FSMContext(storage=storage,
                                  key=StorageKey(bot_id=bot.id,
                                                 chat_id=partner_id,
                                                 user_id=partner_id
                                                 )
                                  )
    liked_user = await liked_user_state.get_data()
    cur_liked_user_state = await liked_user_state.get_state()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏ —Ç–∞–∫ —Å–º–æ—Ç—Ä–µ–ª –ª–∞–π–∫–∏ –∏ –ø—Ä–∏—à–µ–ª –µ—â–µ –æ–¥–∏–Ω
    if cur_liked_user_state == LookingPartner.choosing_show_likes or cur_liked_user_state == LookingPartner.show_likes:
        await add_like(user_id=liked_user.get("current_partner_id"), liked_user_id=partner_id)

    await bot.send_message(
        chat_id=partner_id,
        text=f"üíò –¢—ã –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫–ª–æ–Ω–Ω–∏–∫–∞?\n\n"
             f"(–ê –∫ –∞–Ω–∫–µ—Ç–µ –≤—ã—à–µ –º—ã –≤–µ—Ä–Ω–µ–º—Å—è –ø–æ–∑–∂–µ)",
        reply_markup=create_row_kb(["1üëç", "2üí§"])
    )

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –Ω–µ —É—Å–ø–µ–ª–∏ –ª–∞–π–∫–Ω—É—Ç—å
    await remove_viewed_partner(user_id=partner_id, partner_id=liked_user.get("current_partner_id"))

    await liked_user_state.set_state(LookingPartner.choosing_show_likes)
    await liked_user_state.update_data(current_partner_id=message.from_user.id, current_partner_username=message.from_user.username)

# –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ª–∞–π–∫–Ω—É–≤—à–Ω–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
@router.message(LookingPartner.choosing_show_likes, F.text == "1üëç")
@router.message(LookingPartner.show_likes, CorrectEmoji())
async def chosen_show_like(message: Message, state: FSMContext):
    if LookingPartner.choosing_show_likes:
        await message.answer(
            text="‚ú®üîç",
            reply_markup=create_row_kb(["‚ù§Ô∏è", "üëé", "üí§"])
        )

    user_data = await state.get_data()
    current_partner_id = user_data.get("current_partner_id")
    current_partner_username = user_data.get("current_partner_username")

    if message.text == "‚ù§Ô∏è":
        await message.answer(
            text=f"üíò –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ! –ù–∞–¥–µ—é—Å—å, –≤—ã —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è\n"
                 f"–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è üëâ @{current_partner_username}"
        )
        await notify_partner_about_match(
            partner_id=current_partner_id,
            user_name=message.from_user.username,
            bot=my_bot
        )

    likers = await get_likers(message.from_user.id)

    if likers is None:
        await message.answer(
            text="–ù–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º?",
            reply_markup=create_row_kb(["üöÄ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ú–µ–Ω—é"])
        )
        await state.set_state(LookingPartner.choosing_after_show_likes)
    elif likers:

        like = await delete_like(user_id=likers[0].user_id, liked_user_id=likers[0].liked_user_id)
        partner = await get_user(like.user_id)
        await state.update_data(current_partner_id=partner.telegram_id,
                                current_partner_username=partner.telegram_username)

        if len(likers) == 1:
            await message.answer(
                text=f"üíò –í–æ—Ç –Ω–æ–≤—ã–π –ø–æ–∫–ª–æ–Ω–Ω–∏–∫:"
            )
        else:
            await message.answer(
                text=f"üíò –í–æ—Ç –Ω–æ–≤—ã–π –ø–æ–∫–ª–æ–Ω–Ω–∏–∫ (–∏ –µ—â–µ {len(likers) - 1}):"
            )

        await show_partner_profile(message=message, partner=partner)
        await add_viewed_partner(user_id=message.from_user.id, partner_id=current_partner_id)

        await state.set_state(LookingPartner.show_likes)


# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∂–∏–º—É "–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
@router.message(F.text.lower() == "1üöÄ")
@router.message(LookingPartner.after_matches)
@router.message(LookingPartner.choosing_after_show_likes, F.text.lower() == "üöÄ–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
@router.message(LookingPartner.choosing_show_likes, F.text == "2üí§")
async def chosen_looking_partner(message: Message, state: FSMContext):
    await message.answer(
        text="‚ú®üîç",
        reply_markup=create_row_kb(["‚ù§Ô∏è", "üëé", "üí§"])
    )

    user = await get_user(message.from_user.id)
    partner = await find_unviewed_partner(user_id=user.telegram_id, preference=user.preference)

    if not partner:
        await message.answer(
            text="–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!",
            reply_markup=create_row_kb(["–ú–µ–Ω—é"])
        )
        await state.set_state(LookingPartner.menu)
    elif partner:
        await add_viewed_partner(user_id=user.telegram_id, partner_id=partner.telegram_id)

        await show_partner_profile(message, partner)
        await state.update_data(current_partner_id=partner.telegram_id,
                                current_partner_username=partner.telegram_username)

        await state.set_state(LookingPartner.looking_partners)

# –†–µ–∂–∏–º "–ü–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
@router.message(LookingPartner.looking_partners, CorrectEmoji())
async def like_dislike_partner(message: Message, state: FSMContext):
    user_data = await state.get_data()
    current_partner_id = user_data.get("current_partner_id")
    current_partner_username = user_data.get("current_partner_username")

    if message.text == "‚ù§Ô∏è":
        if await has_partner_liked_back(user_id=message.from_user.id, partner_id=current_partner_id):
            await message.answer(
                text=f"üíò –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ! –ù–∞–¥–µ—é—Å—å, –≤—ã —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è\n"
                     f"–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è üëâ @{current_partner_username}"
            )
            await notify_partner_about_match(
                partner_id=current_partner_id,
                user_name=message.from_user.username,
                bot=my_bot
            )
            await state.set_state(LookingPartner.after_matches)
            await state.update_data(current_partner_id=None, current_partner_username=None)
        else:
            await add_like(user_id=message.from_user.id, liked_user_id=current_partner_id)
            await notify_partner_about_like(partner_id=current_partner_id, bot=my_bot, message=message)
            await state.update_data(current_partner_id=None, current_partner_username=None)

    user = await get_user(message.from_user.id)
    partner = await find_unviewed_partner(user_id=user.telegram_id, preference=user.preference)

    if not partner:
        await message.answer(
            text="–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!",
            reply_markup=create_row_kb(["–ú–µ–Ω—é"])
        )
        await state.set_state(LookingPartner.menu)
    elif partner:
        await add_viewed_partner(user_id=user.telegram_id, partner_id=partner.telegram_id)
        await show_partner_profile(message, partner)

        await state.update_data(current_partner_id=partner.telegram_id,
                                current_partner_username=partner.telegram_username)

# –ú–µ–Ω—é —Ä–µ–∂–∏–º–∞ "–ü–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
@router.message(LookingPartner.looking_partners, F.text.lower() == "üí§")
@router.message(LookingPartner.menu, F.text.lower() == "–Ω–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å")
@router.message(F.text.lower() == "–º–µ–Ω—é")
async def stop_looking_partner(message: Message, state: FSMContext):
    # –£—à–ª–∏ –≤ —Å–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–µ–π –∞–Ω–∫–µ—Ç—ã
    if (message.text == "üí§"):
        user = await state.get_data()
        await remove_viewed_partner(user_id=message.from_user.id, partner_id=user.get("current_partner_id"))

    await message.answer("–ü–æ–¥–æ–∂–¥–µ–º –Ω–æ–≤—ã—Ö –ø–∞—Ä!")
    await message.answer(
        text="1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n"
             "2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞\n"
             "3. –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
        reply_markup=create_row_kb(["1üöÄ", "2", "3"])
    )
    await state.set_state(LookingPartner.menu)

# 2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞
@router.message(LookingPartner.menu, F.text.lower() == "2")
@router.message(LookingPartner.hidden_profile, F.text.lower() == "–≤–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def chosen_show_profile(message: Message, state: FSMContext):
    await activate_user(user_id=message.from_user.id)
    await message.answer("–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    await show_profile(message=message)
    await create_menu_keyboard(message=message)
    await state.set_state(ChangeProfile.selects_menu)

# 3. –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É
@router.message(LookingPartner.menu, F.text.lower() == "3")
async def sure_to_hide_profile(message: Message, state: FSMContext):
    await message.answer(
        text="–ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏—à—å –∞–Ω–∫–µ—Ç—É, —Ç–æ –Ω–µ —Å–º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –ø–∞—Ä—ã –∏ —É–∑–Ω–∞–≤–∞—Ç—å, "
             "—á—Ç–æ –∫–æ–º—É-—Ç–æ –Ω—Ä–∞–≤–∏—à—å—Å—è. –¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É?",
        reply_markup=create_row_kb(["–î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", "–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å"])
    )

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
@router.message(F.text.lower() == "–¥–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å")
async def chosen_hide_profile(message: Message, state: FSMContext):
    await message.answer(
        text="–†–∞–¥ –±—ã–ª —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è!\n"
             "–ï—Å–ª–∏ –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ, –ø–∏—à–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–º —Ç–µ–±–µ –ø–∞—Ä—É!",
        reply_markup=create_row_kb(["–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É"])
    )
    await deactivate_user(user_id=message.from_user.id)
    await state.set_state(LookingPartner.hidden_profile)
