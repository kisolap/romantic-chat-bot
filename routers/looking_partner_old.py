from aiogram import Router, F, Bot

from aiogram.fsm.context import FSMContext
from aiogram.filters import Filter
from aiogram.types import ReplyKeyboardRemove, Message

from answer_functions.create_keyboard import create_row_kb, create_menu_keyboard
from db import find_partner, add_viewed_partner, add_like, check_match
from answer_functions.show_profile import show_profile, show_partner_profile

from states import LookingPartner, ChangeProfile

router = Router()

class CorrectEmoji(Filter):
    async def __call__(self, message: Message) -> bool:
        if message.text == "‚ù§Ô∏è" or message.text == "üëé":
            return True
        else:
            return False

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
async def notify_partner_about_match(partner_id: int, bot: Bot, user_name: str):
    await bot.send_message(
        chat_id=partner_id,
        text=f"üéâ –£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ {user_name}")

#-----------------------------------------#

# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∂–∏–º—É "–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
@router.message(F.text.lower() == "1üöÄ")
@router.message(LookingPartner.after_matches)
async def chosen_looking_partner(message: Message, state: FSMContext):
    await message.answer(
        text="‚ú®üîç",
        reply_markup=create_row_kb(["‚ù§Ô∏è", "üëé", "üí§"])
    )

    user_id = message.from_user.id
    partner = find_partner(user_id)

    add_viewed_partner(user_id=user_id, partner_id=partner["telegram_id"])
    await show_partner_profile(message)

    await state.update_data(current_partner_id=partner["telegram_id"])
    await state.update_data(current_partner_username=partner["username"])
    await state.set_state(LookingPartner.looking_partners)

# –†–µ–∂–∏–º "–ü–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
@router.message(LookingPartner.looking_partners,
                CorrectEmoji())
async def like_dislike_partner(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_username = user_data.get("username")
    current_partner_id = user_data.get("current_partner_id")
    current_partner_username = user_data.get("current_partner_username")

    if message.text.lower() == "‚ù§Ô∏è":
        add_like(user_id=message.from_user.id, partner_id=current_partner_id)

    if check_match(user_id=message.from_user.id, partner_id=current_partner_id):
        await message.answer(
            text=f"–ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ! –ù–∞–¥–µ—é—Å—å, –≤—ã —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è :) "
                 f"–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è üëâ {current_partner_username}"
        )
        # await notify_partner_about_match(partner_id=current_partner_id, bot=my_bot, user_name=user_username)
        await state.set_state(LookingPartner.after_matches)
    else:
        user_id = message.from_user.id
        partner = find_partner(user_id)

        add_viewed_partner(user_id=user_id, partner_id=partner["telegram_id"])
        await show_partner_profile(message)

        await state.update_data(current_partner_id=partner["telegram_id"])
        await state.update_data(current_partner_username=partner["username"])

        await state.set_state(LookingPartner.looking_partners)

# –ú–µ–Ω—é —Ä–µ–∂–∏–º–∞ "–ü–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
# (–ï—Å–ª–∏ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã)
@router.message(LookingPartner.looking_partners, F.text.lower() == "üí§")
@router.message(LookingPartner.menu, F.text.lower() == "–Ω–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å")
async def stop_looking_partner(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–¥–æ–∂–¥–µ–º –Ω–æ–≤—ã—Ö –ø–∞—Ä!"
    )

    await message.answer(
        text="1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n"
             "2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞\n"
             "3. –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
        reply_markup = create_row_kb(["1üöÄ", "2", "3"])
    )

    await state.set_state(LookingPartner.menu)

#-----------------------------------------#

# 2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞
@router.message(LookingPartner.menu,
                F.text.lower() == "2")
@router.message(LookingPartner.hidden_profile,
                F.text.lower() == "–≤–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def chosen_show_profile(message: Message, state: FSMContext):
    await message.answer(
        text="–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await show_profile(message=message, state=state)
    await create_menu_keyboard(message=message)

    await state.set_state(ChangeProfile.selects_menu)

# 3. –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É
@router.message(LookingPartner.menu,
                F.text.lower() == "3")
async def sure_to_hide_profile(message: Message, state: FSMContext):
    await message.answer(
        text="–ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏—à—å –∞–Ω–∫–µ—Ç—É, —Ç–æ –Ω–µ —Å–º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –ø–∞—Ä—ã –∏ —É–∑–Ω–∞–≤–∞—Ç—å, "
             "—á—Ç–æ –∫–æ–º—É-—Ç–æ –Ω—Ä–∞–≤–∏—à—å—Å—è. –¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É?",
        reply_markup=create_row_kb(["–î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", "–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å"])
    )

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
@router.message(F.text.lower() == "–¥–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å")
async def chosen_hide_profile(message: Message, state: FSMContext):
    await message.answer(
        text="–†–∞–¥ –±—ã–ª —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è!\n"
             "–ï—Å–ª–∏ –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ –ø–∏—à–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–º —Ç–µ–±–µ –ø–∞—Ä—É!",
        reply_markup=create_row_kb(["–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É"])
    )
    await state.set_state(LookingPartner.hidden_profile)

